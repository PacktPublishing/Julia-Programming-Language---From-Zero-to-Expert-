WEBVTT

00:01.330 --> 00:04.910
If you worked with Python, you would already be very familiar with dictionaries.

00:04.930 --> 00:07.080
They're very common, very prevalent in Python.

00:08.170 --> 00:14.530
If you've come from Java or C C++, C sharp, they are called maps or hash maps or any type of map.

00:14.840 --> 00:18.260
OK, so they are a collection of developers.

00:18.280 --> 00:20.460
So for instance, let's start off with this index.

00:20.710 --> 00:29.080
So you said is equal to dict and then you can define the keys and the values which are separated by

00:29.230 --> 00:30.250
the arrow operator.

00:30.280 --> 00:34.330
So key arrow value, comma, key arrow value and so on.

00:34.330 --> 00:38.620
You can have multiple values, you can have multiple developers in this one dictionary.

00:38.770 --> 00:43.450
OK, there is no shorthand for dictionary and Julia as there is for arrays.

00:43.620 --> 00:45.850
If you just have to define it using the Decky word.

00:45.850 --> 00:47.670
OK, so you do that is equal to that.

00:47.680 --> 00:52.630
So you have this dictionary over here in which we have strings as keys and strings as values.

00:52.640 --> 00:53.610
It has two entries.

00:53.620 --> 00:58.540
You can see you can access it as usual using the square brackets.

00:58.630 --> 01:00.100
So you can say the language.

01:01.330 --> 01:03.070
The dot language does not work.

01:03.460 --> 01:06.270
It does in some languages, but it doesn't in Julia.

01:06.820 --> 01:09.930
You can change the value or even add new values.

01:09.940 --> 01:13.900
You can say the explorer is equal to perseverance and that is going to change.

01:14.470 --> 01:15.460
So you can have that.

01:15.730 --> 01:20.560
You can modify this or mutate the object using the pop bang operator.

01:20.830 --> 01:25.840
So bang from the previous video, you will recall that by means it's going to modify the.

01:26.230 --> 01:31.840
So if you say this is going to return the final value that you have over here, which we just added

01:31.840 --> 01:35.930
over here, and it's going to remove it from the dictionary as well.

01:36.160 --> 01:38.480
So that has been removed from the dictionary.

01:38.620 --> 01:41.170
OK, you can go to dictionaries together.

01:41.680 --> 01:46.900
So if you have D, which is this guy over here and you have another dictionary in which you have OS

01:46.900 --> 01:52.810
and language, so we have language both in this and in this, if you try to merge them together again,

01:52.810 --> 01:54.890
merge is with a bank, which means it's going to modify.

01:55.690 --> 01:59.380
So by convention this D is going to be modified and is going to remain the same.

01:59.830 --> 02:06.540
So what it does is it takes D and then goes through it and inserts all the values into the from E.

02:06.550 --> 02:08.680
So is the source D the destination.

02:08.920 --> 02:12.880
Anything that is in both is going to be taken from E..

02:13.150 --> 02:17.020
OK, so it makes a lot more sense if you just take a look at the example.

02:17.050 --> 02:23.350
So if you much D and E, the language is now Java because Java was in E and E essentially overrides

02:23.350 --> 02:24.720
everything that is in deep.

02:24.940 --> 02:28.600
OK, if you show the you can see that language has been replaced with that.

02:28.840 --> 02:30.700
If you show E.

02:32.590 --> 02:34.640
That is unmodified, that remains the same.

02:34.660 --> 02:40.750
OK, so much is going to modify the take everything from me and throw it at the if they already had

02:40.750 --> 02:42.390
that key before, it's going to be over.

02:43.450 --> 02:49.570
You can loop over the values of the dictionary using Faqir Komova and and you can output them using

02:49.570 --> 02:53.890
string interpolation so you can take easy call to type character values.

02:54.160 --> 02:57.520
Garvey and this is going to output all of that for you.

02:57.830 --> 03:04.630
OK, you can also use symbols as keys in dictionary so you can say is contradict regular Lang is Julia

03:04.630 --> 03:05.810
and it is brutal.

03:06.340 --> 03:11.560
So now you can access them using symbols just as you could with strings.

03:11.590 --> 03:14.440
So now here the keys are symbols instead of strings.

03:14.590 --> 03:17.770
So you can say simple language and you get the value out.

03:18.130 --> 03:20.580
OK, rest of it is exactly the same.

03:20.590 --> 03:24.730
So you can say for Kaigama being simple and you print it out to get an ID out.

03:25.390 --> 03:27.020
So those are the basics of the dictionary.

03:27.550 --> 03:31.630
Obviously there is a lot to do with dictionaries, but we don't want to cover them here.

03:31.660 --> 03:33.220
This is the basic syntax that you need.

03:33.400 --> 03:34.600
That is all there is to it.

03:34.810 --> 03:38.160
Once we start using them in the real world, you'll get a lot more practice with it.

03:38.320 --> 03:44.140
For now, let's go back to the arrays and take a look at the specific functionality that Julia provides

03:44.140 --> 03:45.950
for arrays that makes Julia special.

03:46.060 --> 03:47.410
So let's do that in the next video.
