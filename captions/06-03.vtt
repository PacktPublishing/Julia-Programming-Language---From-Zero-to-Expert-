WEBVTT

00:00.700 --> 00:06.640
Having seen the fundamentals of flux, we are now in a position to use the facilities provided by influx

00:06.970 --> 00:08.890
to do a real world study.

00:09.160 --> 00:14.530
So this is still a toy example, but it's very representative of the stuff that we have to do in the

00:14.530 --> 00:15.040
real world.

00:15.370 --> 00:17.490
So we are going to start off with the smallest examples.

00:17.500 --> 00:21.700
It's the typical machine learning example that people usually do whenever they're starting to learn

00:21.700 --> 00:22.260
machine learning.

00:22.840 --> 00:26.410
These are the digits which are handwritten digits from zero to nine.

00:26.600 --> 00:30.370
And each of the images has an associated label, which is the ground truth.

00:30.520 --> 00:33.720
So the images have a single channel, which is a grayscale channel.

00:33.820 --> 00:40.900
And this is typically a 28 by 28 image in which each pixel is represented with a value representing

00:40.900 --> 00:41.780
how black it is.

00:42.190 --> 00:48.070
The idea is to take this image and feed it to the machine, give it some examples and then see if the

00:48.070 --> 00:48.820
machine has learned.

00:49.060 --> 00:50.550
So that is what we're going to do over here.

00:50.860 --> 00:53.100
So let's move over to our example code over here.

00:53.560 --> 01:01.320
So we are going to initialize our random library with a seed that is going to ensure experiment reproducibility.

01:02.080 --> 01:03.400
You can send this to any value.

01:03.400 --> 01:07.120
One, two, three, four is not important, but make sure that you keep it there so that you can run

01:07.120 --> 01:08.410
the same experiments again and again.

01:08.590 --> 01:12.990
OK, so let's run that and import some of the stuff that is going to be needed.

01:13.240 --> 01:18.940
So we're going to use flux and the statistics package and we are also going to need the dataset that

01:18.940 --> 01:20.950
comes built in with Whitlock's.

01:21.250 --> 01:26.740
And we also have the one batch function from Plug's, which essentially converts categorical values

01:26.740 --> 01:28.420
into one or two representations.

01:28.600 --> 01:30.010
OK, so let's wait.

01:30.010 --> 01:34.960
And on that, we are going to load the images using Amistad images and then see what the type of that

01:34.960 --> 01:35.220
is.

01:35.560 --> 01:39.360
So the type of images in this case is going to be an array.

01:39.880 --> 01:42.480
So this looks really complicated, but we're going to break it down.

01:42.850 --> 01:47.590
So it's an array, which is a one dimensional array, which means it's an array of images.

01:47.840 --> 01:52.300
So all of this stuff over here that you see that is going to represent one image.

01:52.630 --> 01:54.790
OK, so make sure that you understand this.

01:55.000 --> 01:56.740
We have to break this down a lot.

01:57.200 --> 02:03.510
So this is the whole image is variable is an array, which is a one dimensional array of images.

02:03.520 --> 02:04.780
So this is one image.

02:05.170 --> 02:06.580
What is one image composed of?

02:06.880 --> 02:12.370
It's again, an array, but a two dimensional array because it's an image, it has a height and width.

02:12.670 --> 02:16.420
OK, and what is an individual cell composed of?

02:16.630 --> 02:18.430
It's a color type dot gray.

02:18.880 --> 02:25.270
So it's a grayscale image in which each individual value is an eight bit unsigned integer.

02:25.330 --> 02:27.220
OK, so this is not all that important.

02:27.220 --> 02:33.040
All you have to understand is that it's a grayscale image, a 2D grayscale image and then a collection

02:33.040 --> 02:34.900
of 2D grayscale images.

02:35.370 --> 02:36.400
OK, that's what we have.

02:36.400 --> 02:38.490
That is our images collection over here.

02:39.100 --> 02:42.060
Let's dissect that a little bit so that we understand it really well.

02:43.000 --> 02:46.740
The reason for that is whenever you're doing machine learning, you have to really understand your data.

02:46.900 --> 02:52.060
Once you understand your data, feeding it to a typical machine learning model will be really straightforward.

02:52.060 --> 02:54.280
But if you don't understand your data, it's going to be problematic.

02:54.310 --> 02:59.230
So we're going to spend a little bit of time over here on that and see how Julia works with data.

02:59.830 --> 03:04.680
So we're going to import the product package and try to plot the first image that we have.

03:04.960 --> 03:10.570
So we are going to say that it should do a scatter image or the scatterplot for images one so for the

03:10.570 --> 03:12.760
first digit image that we have.

03:12.910 --> 03:18.270
So for this guy over here, OK, so we're going to block this and the this is going to be 200 by 200.

03:18.280 --> 03:22.480
OK, so when we do that, Julia just knows that this is an image.

03:22.480 --> 03:23.950
So it's going to plotted like an image.

03:24.370 --> 03:26.310
So the image is over here.

03:27.280 --> 03:32.690
If you try to look at the size of images, it should have 60000.

03:32.710 --> 03:35.110
So this is the number of images that we have.

03:35.110 --> 03:38.840
And for a particular image, the size is 28 by 28.

03:38.950 --> 03:40.120
OK, OK, that makes sense.

03:40.810 --> 03:43.450
Now we are going to load and encode the labels.

03:43.670 --> 03:48.700
So if you do administrative labels, you get all the labels and you can see the first five to see what

03:48.700 --> 03:49.230
they look like.

03:49.600 --> 03:52.270
So obviously they are five zero four one nine.

03:52.960 --> 03:55.640
So the first image that we saw over here, this is a five.

03:55.660 --> 03:59.550
Obviously it looks like a five to us, but for machine, it's going to be difficult anyway.

04:00.010 --> 04:04.240
So what we want to do now is to convert this five into a one hard vector representation.

04:04.420 --> 04:12.310
OK, so if you just take a look at the size of the labels, it's 60000, which corresponds with the

04:12.310 --> 04:13.270
60000 images.

04:13.870 --> 04:20.320
We are going to use the one batch to convert all the labels into categories or one representation in

04:20.320 --> 04:23.210
which the possibilities are from zero to nine.

04:23.370 --> 04:26.850
OK, let me output the first label here and then you'll see what this means.

04:27.130 --> 04:35.440
So we have all zeros and just one value is hard on our one because this is the value that corresponds

04:35.440 --> 04:35.770
to five.

04:35.770 --> 04:40.540
So zero one, two, three, four and five, six, seven, eight and nine.

04:40.750 --> 04:41.730
So this is a five.

04:42.070 --> 04:44.980
So we have this five index over here as one.

04:45.340 --> 04:48.790
Please do not confuse this with the one based indexing of Julia.

04:48.820 --> 04:54.390
Julia still does one based indexing, but this is the label zero and label nine.

04:54.400 --> 04:55.960
So the digit that we're talking about.

04:56.050 --> 04:59.890
So that's why we have this going from zero to nine we can take a look at.

04:59.970 --> 05:06.030
The second one, so the second one has to be a zero, so the zeroth index is going to be one.

05:06.570 --> 05:08.970
We can go ahead and look at all five of these.

05:09.000 --> 05:13.620
So from one to five, the first one should be five, the second zero, the third and fourth and so on.

05:14.190 --> 05:16.620
So five one.

05:16.830 --> 05:18.420
This is for this is one.

05:18.600 --> 05:20.360
So this guy over here and this is zero.

05:20.370 --> 05:22.950
One, two, three, four, five, six, seven, eight, nine, nine.

05:23.280 --> 05:28.480
OK, so all of these are converted into this representation, which is called the one vector representation.

05:28.980 --> 05:33.990
This is because this makes it a lot easier for the machine to work with and it makes the mathematics

05:33.990 --> 05:34.910
really easy to work with.

05:34.920 --> 05:36.510
You'll see what this means in a minute.

05:37.140 --> 05:45.390
OK, so the size of labels now is not just 60000, but then cross 60000 because ten rows and 60000 images,

05:45.540 --> 05:45.850
OK?

05:46.500 --> 05:51.750
Right now what we want to do is we want to create badges for feeding into the machine learning algorithm.

05:52.080 --> 05:57.270
Typically we don't want to feed the whole dataset to the algorithm in one go.

05:57.450 --> 06:03.240
And the reason for that is nowadays data sets are very huge and we have to break them into batches if

06:03.240 --> 06:07.290
you want to feed them, because your typical dataset is not going to fit in the memory.

06:07.680 --> 06:09.270
The smallest can fit into memory.

06:09.270 --> 06:12.900
But we have to learn how to handle the datasets which do not.

06:13.080 --> 06:17.070
So we're going to see how to create badges and prepare our data when it cannot be faked.

06:17.340 --> 06:21.560
So what we're going to do is use what are called partitions from Bistrot iterators.

06:21.870 --> 06:24.500
Let me give you an example of this outside of machine learning.

06:24.510 --> 06:33.180
So if I say using bastante outrageous partition and I say for I in partition one and seven and two,

06:33.330 --> 06:40.290
you will see that I go from one to seven and each step, each partition is going to be of two length.

06:40.290 --> 06:44.940
So one, two, two, three to four, five to six and seven to seven because that is all we have over

06:44.940 --> 06:45.140
here.

06:46.020 --> 06:47.770
So you can create partitions for any length.

06:47.790 --> 06:54.030
So from one to ten, you can create a partition of size two, you can create a partition of size five.

06:54.240 --> 06:56.100
And that is going to give you one, two, five, six to ten.

06:56.120 --> 07:01.420
So this is a really easy way of creating partitions instead of us having to loop over the stuff manually.

07:01.500 --> 07:04.320
OK, so let's go back to our images.

07:04.350 --> 07:06.100
So this is an image.

07:06.420 --> 07:12.170
So this is a 28 by 28 image if we take a look at its type.

07:12.180 --> 07:14.420
So the type of this first cell over here.

07:14.700 --> 07:16.100
So image is one one.

07:16.650 --> 07:18.780
This is going to be a grayscale image.

07:19.150 --> 07:21.750
So this one cell over here is a grayscale image.

07:22.260 --> 07:25.710
Now, this needs to be converted into float because of machine learning.

07:25.710 --> 07:27.290
Algorithms work with floats.

07:27.660 --> 07:30.780
They do not work with grayscale images or this really weird data.

07:31.050 --> 07:31.950
They work with floats.

07:32.130 --> 07:33.120
So we have to convert it.

07:33.900 --> 07:35.850
Let's start off with these type of images.

07:36.420 --> 07:38.560
This is this weird guy that we saw earlier.

07:38.640 --> 07:41.870
So it's an array of one dimension.

07:41.880 --> 07:43.380
So these are all the images.

07:44.100 --> 07:53.290
Each image is a 2D array because it's a 2D image and it has as its individual value a grayscale image.

07:53.310 --> 07:55.520
So we want to convert this whole thing into floats.

07:55.860 --> 07:58.110
We can simply go ahead and say float dot images.

07:58.860 --> 08:04.390
If you do that, you will see that the data type of this changes immediately to a proper format.

08:04.560 --> 08:06.630
So we have an array, which is a one dimensional array.

08:07.050 --> 08:13.230
This one thing is going to be our image, and this is a two dimensional array of floats, perfectly

08:13.230 --> 08:13.500
clean.

08:13.690 --> 08:15.000
So this becomes very clean.

08:15.300 --> 08:22.650
The problem here is that this is flawed, 64 and a lot of the library which comes with flux is going

08:22.650 --> 08:24.210
to work with floor 32.

08:24.570 --> 08:31.110
So if you do not do this conversion from floor 64 to 32, this is going to be really problematic down

08:31.110 --> 08:32.540
the line and it's going to give you errors.

08:32.730 --> 08:35.240
It's one of those things that tutorials typically don't cover.

08:35.250 --> 08:38.170
But I want to cover it over here so that you don't have the headaches down the line.

08:38.520 --> 08:41.760
So we are going to convert this float dot images.

08:41.790 --> 08:48.040
So this guy over here, we are going to convert it into an array, which is a monumental array of two

08:48.090 --> 08:51.860
dimensional arrays of floor 32, not floats 64, but for 32.

08:51.870 --> 08:52.800
So this is the difference.

08:53.160 --> 08:54.350
So let's do this again.

08:54.720 --> 08:59.340
So we are going to convert this guy into this guy.

08:59.940 --> 09:02.570
OK, so let me put this on a separate line.

09:02.850 --> 09:05.670
So this is going to be an array, which is going to be a one dimensional array.

09:05.850 --> 09:07.860
So this is the collection of images.

09:08.340 --> 09:14.790
One image is going to be a two dimensional array in which each cell is going to have a flow 32 type

09:14.790 --> 09:15.150
value.

09:15.470 --> 09:17.850
OK, so let's consider this.

09:18.750 --> 09:23.720
So now if you take a look at the size of the first image, it's going to be 28 by 28 still.

09:23.730 --> 09:24.630
So that's what we need.

09:24.990 --> 09:28.190
But type of images is now in error rate and float 32.

09:28.470 --> 09:34.230
So the difference between this and this is that this is flawed 64 and this is 32, which is what we

09:34.230 --> 09:37.290
need for our models right now.

09:37.320 --> 09:41.210
As we saw earlier, each individual image is going to be a grayscale image.

09:41.220 --> 09:43.050
So it's going to have just one channel.

09:43.830 --> 09:49.080
So if you're not familiar with channels, a typical color image has three channels, red, green and

09:49.080 --> 09:49.320
blue.

09:49.330 --> 09:54.270
So it's going to have this thing repeated three times, one for each color and those colors combined

09:54.510 --> 09:58.050
to form the image that we see as humans as a color image.

09:58.080 --> 09:59.340
OK, so red, green and blue.

09:59.360 --> 09:59.760
So it's.

09:59.830 --> 10:05.320
Three channels here, we have just one channel, but we have to convert it into a different format in

10:05.320 --> 10:07.690
which the channel is explicitly specified.

10:08.680 --> 10:14.430
So if you take a look at the image, it's going to have just it to the image over here.

10:14.710 --> 10:18.640
We have to convert it so that the channel information is always is also there.

10:18.880 --> 10:19.900
So let's go ahead and do that.

10:20.230 --> 10:25.210
So, for instance, if we take this guy over here, images want to do so, the first two images and

10:25.210 --> 10:27.150
we increase the dimensions to four.

10:27.340 --> 10:29.470
That is what Cat does right now.

10:29.470 --> 10:30.610
It has three dimensions.

10:31.300 --> 10:36.520
The height, width and the number of images we have to convert it into force or an extra dimension is

10:36.520 --> 10:37.170
going to be introduced.

10:37.690 --> 10:38.980
It seems complicated.

10:39.200 --> 10:41.200
I'll output this and then you'll see what this means.

10:41.470 --> 10:45.280
OK, so Daewon is now going to be.

10:46.960 --> 10:49.850
A 28 by 28, by one, by two.

10:49.870 --> 10:55.260
So these are two images because we took two images over here and it's a 28 by 28 by one.

10:55.420 --> 10:58.830
So this one has been introduced as an extra layer over here.

10:59.170 --> 11:02.940
The reason for this is right now it's just one channel of grayscale.

11:03.220 --> 11:09.490
But if it was a color image, it would be 28 by 28 by three, and RGV would be handled perfectly well

11:09.490 --> 11:10.150
by our model.

11:10.420 --> 11:11.700
OK, hope that made sense.

11:12.160 --> 11:16.870
The Syntex over here is you create two elements for the tuple.

11:16.870 --> 11:21.670
The first is going to be the image or the collection of images, and the second is going to be the collection

11:21.670 --> 11:22.450
of labels.

11:22.810 --> 11:26.080
OK, so we say dissolve one.

11:26.080 --> 11:28.370
So it's a 28 by 28 by one.

11:28.390 --> 11:33.330
So this is the number of channels and this two is the number of images of that Minton's.

11:33.580 --> 11:36.190
OK, we're going to put all of this together.

11:36.340 --> 11:42.100
Advertize is going to be a thousand and now we can create our training data dataset by combining everything

11:42.100 --> 11:42.470
together.

11:42.670 --> 11:51.040
So we are going to create a list of the first batch training images and the first batch labels.

11:51.340 --> 11:52.680
Where does the batch going to come from?

11:52.690 --> 11:57.910
It's going to come from the partition of one to 60000, so you can use it on a scale to make it more

11:58.030 --> 11:58.480
readable.

11:59.140 --> 12:03.880
So we are going to first create batches of that size each.

12:03.880 --> 12:09.850
So we are going to have 60 batches from one 2000 and 2001 to 2000 and so on.

12:10.300 --> 12:12.820
For each of these, we are going to collect the images.

12:14.390 --> 12:18.350
Increase the dimensions by one and append the labels with them.

12:18.620 --> 12:22.730
OK, so let me run this and then show you what the output is.

12:23.270 --> 12:26.500
The training data is now 60 batches trained.

12:26.510 --> 12:28.870
One is the first batch.

12:28.880 --> 12:30.260
It has two things.

12:30.530 --> 12:32.450
The training images and the training labels.

12:33.170 --> 12:35.990
The training images are in train one one.

12:36.260 --> 12:39.790
So these are twenty eight by twenty eight by one by a thousand images.

12:39.800 --> 12:44.570
So a thousand images, one channel each channel has twenty eight by twenty eight grayscale image.

12:44.780 --> 12:49.610
OK, and the second one over here is ten by 1000.

12:49.790 --> 12:51.890
So ten for.

12:53.360 --> 12:59.270
This and a thousand for the images, because that is our bad side of this made sense.

12:59.900 --> 13:03.440
Please go ahead and do this again and again so that you understand everything that's going on.

13:04.610 --> 13:07.300
Similarly, let's also create the test data.

13:07.550 --> 13:11.450
So test data is going to come from the Amistad images call and test.

13:12.020 --> 13:14.390
So we are only going to read a thousand test images.

13:14.420 --> 13:15.170
That's all we need.

13:15.710 --> 13:19.510
And we are going to convert this into floats.

13:19.910 --> 13:22.730
And if you take a look at that, it's flawed, 64.

13:22.730 --> 13:25.130
So we have to convert it into a 432 as before.

13:25.640 --> 13:27.620
And then we are going to take a look at it Stip.

13:27.620 --> 13:28.870
And now this is it from 32.

13:28.880 --> 13:35.990
So everything is now, if everything works fine, we are also going to convert our tests using the same

13:36.440 --> 13:37.480
dimension criteria.

13:37.610 --> 13:44.870
So we have a channel added to it and we are going to convert our labels for the test using one hot batch

13:44.870 --> 13:45.230
as well.

13:45.490 --> 13:51.050
OK, so if you do that and you take a look at the size of it's 28 by 28 by one.

13:51.060 --> 13:57.460
So this is one image for one channel and a thousand test images and the labels are ten by one thousand.

13:57.470 --> 14:01.340
So one heart for this guy and then a thousand images.

14:01.610 --> 14:03.560
OK, so now our data is ready.

14:03.890 --> 14:10.430
We can go ahead and create the actual CNN model and see how this data can be fed to the CNN model,

14:10.610 --> 14:12.060
which is going to be fairly straightforward.

14:12.620 --> 14:13.880
Let's do that in the next video.
