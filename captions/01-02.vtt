WEBVTT

00:01.130 --> 00:06.380
Let's take a look at some control structures, so conditionals, branching and loops, most of the stuff

00:06.380 --> 00:09.710
you'd already be familiar with if you work with any programming language before.

00:09.950 --> 00:14.750
But we'll go through this just to make sure that you understand the syntax of Julia so we can define

00:14.750 --> 00:19.210
variables and then go ahead and do some conditionals based on those variables.

00:19.220 --> 00:26.270
So we say if X is greater than 20, we print this line and we need to end the if block using the end

00:26.270 --> 00:26.810
statement.

00:27.120 --> 00:28.740
OK, so this is index.

00:28.940 --> 00:31.880
You start a blog and you end it with the end statement.

00:32.120 --> 00:32.900
You don't need to say.

00:32.900 --> 00:39.590
And if it's just end, OK, some differences from for instance, by then you don't need a colon over

00:39.590 --> 00:42.830
here and the indentation is ignored by the interpreter.

00:43.040 --> 00:48.140
But obviously you should still do it right if you work with Java or C or C++.

00:48.470 --> 00:52.790
A difference from those days that you don't need to have parentheses around the conditions in the IF

00:52.820 --> 00:53.250
statement.

00:53.280 --> 00:55.460
OK, so you can do that.

00:55.460 --> 00:58.550
So that, as expected, brings X is greater than 20.

00:59.180 --> 01:03.300
We can also have to demonstrate that let's do the usual visible example.

01:03.620 --> 01:09.940
So given a number and we print fiz if N is divisible by three, but if it's divisible by five and FISAs,

01:10.100 --> 01:16.160
if it's divisible by three and five, if it's not divisible by either, then we just end itself.

01:16.550 --> 01:22.970
So if any is divisible by three and and is divisible by five fully we put in phase one else.

01:22.970 --> 01:24.650
If so, that's the syntax.

01:24.650 --> 01:31.490
And Julia Elif instead of Elif of Python and is divisible by three fully we print face and if it's divisible

01:31.490 --> 01:34.950
by five we buzz and otherwise we print.

01:34.970 --> 01:37.650
And so that's your typical if left letter.

01:38.090 --> 01:45.620
So if you do that, we get phase four three, we get phase one for 30 and we should get the number 13

01:45.620 --> 01:48.000
itself for 13.

01:48.170 --> 01:54.470
OK, there is also a ternary operator so you can use it, but typically it's good practice to just avoid

01:54.470 --> 01:54.570
it.

01:54.590 --> 01:55.370
So here's this index.

01:55.370 --> 01:57.860
So you have Exercycle two three and Y is equal to six.

01:58.220 --> 02:05.930
We want to assign the value of the larger number to Z, so if X is greater than Y, then the return

02:05.930 --> 02:10.100
value of this whole statement is going to be X, otherwise it's going to be Y.

02:10.340 --> 02:11.270
So here's this index.

02:11.270 --> 02:14.930
You have condition then the ternary operator and value.

02:14.930 --> 02:17.960
If the condition is true, colon value of the condition is false.

02:18.290 --> 02:21.830
So if we run that we get six for three and six.

02:22.010 --> 02:25.800
And if you change this to thirteen and six, then we'll have the output as thirteen.

02:26.090 --> 02:26.400
OK.

02:26.520 --> 02:27.290
Hope that makes sense.

02:28.310 --> 02:29.980
That's all there is to it for branching.

02:30.190 --> 02:37.030
So if you have the understanding of if else, if that's all you need for Julia, we can also have iterations.

02:37.080 --> 02:41.180
So the basic while loop has the exact same syntax, so vile and end.

02:41.540 --> 02:46.610
And here you put the condition and this is the increment of the iterated variable.

02:46.760 --> 02:47.750
So you can do that.

02:47.750 --> 02:49.830
So I zero up to is nine.

02:50.180 --> 02:50.430
OK.

02:50.450 --> 02:51.310
So basic stuff.

02:51.500 --> 02:52.910
Nothing important going on over here.

02:53.750 --> 02:55.700
You can also loop over a list.

02:55.700 --> 03:01.730
So nums is equal to one to nine, you can say forward in nums, NoCal and over here, just as with if

03:02.060 --> 03:03.990
and you can say print l.n. of what.

03:04.010 --> 03:06.760
So it goes from one, two, three, four, five, six, seven, eight, nine.

03:06.980 --> 03:10.190
And obviously it depends on what values you have over here.

03:10.460 --> 03:10.770
OK.

03:11.570 --> 03:14.870
So if the value that we have over it is 80, it gets printed out.

03:14.870 --> 03:16.390
So fairly straightforward stuff.

03:16.910 --> 03:19.840
You can also go from one to ten using this index.

03:19.850 --> 03:23.260
So if you're familiar with Python's range function, this is what it does.

03:23.570 --> 03:28.360
So forward in one to ten, it goes from one to ten, both included.

03:28.670 --> 03:31.430
This is slightly different from the Python syntax.

03:31.730 --> 03:35.030
Python stops just one value before this ending point.

03:35.300 --> 03:37.160
Julia goes right up to the ending point.

03:37.310 --> 03:39.590
So both are included in the statement.

03:39.590 --> 03:42.020
So it depends on your preference.

03:42.290 --> 03:47.300
For me, this is slightly more understandable if you are coming from a mathematical formula because

03:47.300 --> 03:49.130
maths uses one based indices.

03:49.370 --> 03:53.660
So it makes a lot more sense over here if you're coming from that, which is essentially what Julia

03:53.660 --> 04:01.800
Doggett's, if you look at just one to ten itself outside of the actual loop, this is just one content.

04:01.820 --> 04:03.760
So this is very similar to Python's range.

04:04.130 --> 04:05.800
You can say type of one to 10.

04:06.170 --> 04:07.460
So this is a unit range.

04:07.760 --> 04:12.350
Once you loop over it, then it turns into this guy over here, basic stuff.

04:12.500 --> 04:15.770
We are going to come back to this again and again when we actually use them.

04:15.980 --> 04:20.960
I just want you to go over the basic syntax up front so that you're comfortable with the use cases when

04:20.960 --> 04:23.720
you get to the real values of these basic building blocks.
